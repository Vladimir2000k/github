version: '3.7'

services:
  nginx:
    image: nginx:latest
    container_name: tu-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/back/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/back/tu.prod.conf/:/etc/nginx/conf.d/default.conf
      - ./backend-static:/backend-static
      - ./keys:/etc/letsencrypt:ro
    depends_on:
      - app
      - front

  front:
    container_name: tu-front-prod
    image: registry.gitlab.com/amnez/turbouroki-frontend/front:production
    volumes:
      - ./nginx/front/tu-front.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app

  celery_worker:
    command: pipenv run celery -A turbo_uroki_proj worker -l info
    container_name: tu-celery_worker-prod
    depends_on:
      - app
      - rabbitmq
    image: registry.gitlab.com/amnez/turbouroki-backend/back:production
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST_DOCKER}
      - POSTGRES_PORT=${POSTGRES_PORT_DOCKER}
      - REDIS_HOST=${REDIS_HOST_DOCKER}
    volumes:
      - ./turbouroki-firebase-adminsdk-ahnqb-f96ce70bda.json:/code/turbouroki-firebase-adminsdk-creds.json

  celery_beat:
    command: pipenv run celery -A turbo_uroki_proj beat -l info
    container_name: tu-celery_beat-prod
    depends_on:
      - app
      - rabbitmq
    image: registry.gitlab.com/amnez/turbouroki-backend/back:production
    restart: on-failure
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST_DOCKER}
      - POSTGRES_PORT=${POSTGRES_PORT_DOCKER}
      - REDIS_HOST=${REDIS_HOST_DOCKER}
    volumes:
      - ./turbouroki-firebase-adminsdk-ahnqb-f96ce70bda.json:/code/turbouroki-firebase-adminsdk-creds.json

  app:
    container_name: tu-app-prod
    restart: always
    image: registry.gitlab.com/amnez/turbouroki-backend/back:production
    command: sh -c "
      pipenv run python manage.py collectstatic --noinput
      && pipenv run python manage.py migrate
      && pipenv run gunicorn turbo_uroki_proj.asgi:application -b 0.0.0.0:8000 -w 4 -k uvicorn.workers.UvicornWorker"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST_DOCKER}
      - POSTGRES_PORT=${POSTGRES_PORT_DOCKER}
      - REDIS_HOST=${REDIS_HOST_DOCKER}
    volumes:
      - ./backend-static:/code/static
      - ./turbouroki-firebase-adminsdk-ahnqb-f96ce70bda.json:/code/turbouroki-firebase-adminsdk-creds.json
    depends_on:
      - db

  redis:
    container_name: tu-redis-prod
    image: redis:latest
    restart: on-failure

  rabbitmq:
    container_name: tu-rabbitmq-prod
    hostname: rabbitmq
    image: rabbitmq:latest
    restart: on-failure

  db:
    image: postgres:11.4-alpine
    container_name: tu-db-prod
    volumes:
      - postgres_data_tu:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}

  wordpress:
    depends_on:
      - wordpressdb
    image: wordpress:latest
    container_name: tu-wp-stag
    volumes:
      - wordpress_data_tu:/var/www/html
    ports:
      - "8001:80"
    restart: always
    environment:
      - WORDPRESS_DB_HOST=wordpressdb
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=wordpress


  wordpressdb:
    image: mysql:5.7
    container_name: tu-wp-db-stag
    volumes:
      - wordpress_db_data_tu:/var/lib/mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${WORDPRESS_DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=${WORDPRESS_DB_USER}
      - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD}

volumes:
    postgres_data_tu:
    wordpress_db_data_tu:
    wordpress_data_tu:

